[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "paramiko",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "paramiko",
        "description": "paramiko",
        "detail": "paramiko",
        "documentation": {}
    },
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "read_json_file",
        "kind": 2,
        "importPath": "conn",
        "description": "conn",
        "peekOfCode": "def read_json_file(filename):\n    try:\n        with open(filename, \"r\") as file:\n            data = json.load(file)\n        return data\n    except FileNotFoundError:\n        print(f\"Error: The file {filename} was not found.\")\n    except json.JSONDecodeError:\n        print(f\"Error: The file {filename} contains invalid JSON.\")\n    except Exception as e:",
        "detail": "conn",
        "documentation": {}
    },
    {
        "label": "get_connection_data",
        "kind": 2,
        "importPath": "conn",
        "description": "conn",
        "peekOfCode": "def get_connection_data():\n    connections = read_json_file(\"connections.json\")\n    if connections is None or 'connection' not in connections or not connections['connection']:\n        return None\n    return connections['connection']\ndef get_user_input(prompt, default=None):\n    user_input = input(prompt).strip() or default\n    return user_input\ndef select_connection(connections):\n    for i, connection in enumerate(connections, start=1):",
        "detail": "conn",
        "documentation": {}
    },
    {
        "label": "get_user_input",
        "kind": 2,
        "importPath": "conn",
        "description": "conn",
        "peekOfCode": "def get_user_input(prompt, default=None):\n    user_input = input(prompt).strip() or default\n    return user_input\ndef select_connection(connections):\n    for i, connection in enumerate(connections, start=1):\n        print(f\"{i}.) {connection.get('name', 'Unknown')}\")\n    while True:\n        selection = get_user_input(\"Choose connection number or 'q' to quit: \")\n        if selection.lower() == 'q':\n            quit()",
        "detail": "conn",
        "documentation": {}
    },
    {
        "label": "select_connection",
        "kind": 2,
        "importPath": "conn",
        "description": "conn",
        "peekOfCode": "def select_connection(connections):\n    for i, connection in enumerate(connections, start=1):\n        print(f\"{i}.) {connection.get('name', 'Unknown')}\")\n    while True:\n        selection = get_user_input(\"Choose connection number or 'q' to quit: \")\n        if selection.lower() == 'q':\n            quit()\n        if selection.isdigit() and 1 <= int(selection) <= len(connections):\n            return connections[int(selection) - 1]\n        else:",
        "detail": "conn",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "conn",
        "description": "conn",
        "peekOfCode": "def main():\n    connections = get_connection_data()\n    if not connections:\n        print(\"No connection data available. Please check the JSON file.\")\n        return\n    selected_connection = select_connection(connections)\n    host = selected_connection.get(\"address\")\n    port = selected_connection.get(\"port\")\n    user = selected_connection.get(\"user\", \"tibcorun\")  # Use the provided default username if not specified in JSON\n    sshKeypass = selected_connection.get(\"sshKeypass\", \"\")  # Assuming your JSON has the sshKeypass field",
        "detail": "conn",
        "documentation": {}
    },
    {
        "label": "privateKeyPath",
        "kind": 5,
        "importPath": "conn",
        "description": "conn",
        "peekOfCode": "privateKeyPath = \"openSSHkey.pem\"\nUser = \"tibcorun\"\ndef read_json_file(filename):\n    try:\n        with open(filename, \"r\") as file:\n            data = json.load(file)\n        return data\n    except FileNotFoundError:\n        print(f\"Error: The file {filename} was not found.\")\n    except json.JSONDecodeError:",
        "detail": "conn",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "conn",
        "description": "conn",
        "peekOfCode": "User = \"tibcorun\"\ndef read_json_file(filename):\n    try:\n        with open(filename, \"r\") as file:\n            data = json.load(file)\n        return data\n    except FileNotFoundError:\n        print(f\"Error: The file {filename} was not found.\")\n    except json.JSONDecodeError:\n        print(f\"Error: The file {filename} contains invalid JSON.\")",
        "detail": "conn",
        "documentation": {}
    },
    {
        "label": "connect_button",
        "kind": 2,
        "importPath": "pycon",
        "description": "pycon",
        "peekOfCode": "def connect_button():\n    selected_index = listbox.curselection()\n    if selected_index:\n        hostname = data['connection'][selected_index[0]]['name']\n        selected_connection = data['connection'][selected_index[0]]['address']\n        username = \"tibcorun\"\n    else:\n        hostname = \"\"\n        selected_connection = \"\"    \n# Create the main window",
        "detail": "pycon",
        "documentation": {}
    },
    {
        "label": "ssh_client",
        "kind": 2,
        "importPath": "pycon",
        "description": "pycon",
        "peekOfCode": "def ssh_client(hostname, port, username, key_filename, command):\n    # Create an SSH client\n    client = paramiko.SSHClient()\n    # Automatically add the server's host key\n    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n    try:\n        # Connect to the SSH server using key-based authentication\n        client.connect(hostname, port=port, username=username, key_filename=key_filename)\n        # Execute the command to open the terminal (replace with the appropriate command for your server)\n        open_terminal_command = 'gnome-terminal'  # Change this based on your server's terminal emulator",
        "detail": "pycon",
        "documentation": {}
    },
    {
        "label": "hostname",
        "kind": 5,
        "importPath": "pycon",
        "description": "pycon",
        "peekOfCode": "hostname = \"\"\nport = 22\nusername = \"\"\nkey_filename = \"openSSHkey.pem\"\ncommand =\"\"\ndata =\"\"\nlistbox = None\n#windowSize =(128,720)\n# Load the JSON data\nwith open('connections.json', 'r') as json_file:",
        "detail": "pycon",
        "documentation": {}
    },
    {
        "label": "port",
        "kind": 5,
        "importPath": "pycon",
        "description": "pycon",
        "peekOfCode": "port = 22\nusername = \"\"\nkey_filename = \"openSSHkey.pem\"\ncommand =\"\"\ndata =\"\"\nlistbox = None\n#windowSize =(128,720)\n# Load the JSON data\nwith open('connections.json', 'r') as json_file:\n    data = json.load(json_file)",
        "detail": "pycon",
        "documentation": {}
    },
    {
        "label": "username",
        "kind": 5,
        "importPath": "pycon",
        "description": "pycon",
        "peekOfCode": "username = \"\"\nkey_filename = \"openSSHkey.pem\"\ncommand =\"\"\ndata =\"\"\nlistbox = None\n#windowSize =(128,720)\n# Load the JSON data\nwith open('connections.json', 'r') as json_file:\n    data = json.load(json_file)\n# Function to handle the \"Connect\" button click",
        "detail": "pycon",
        "documentation": {}
    },
    {
        "label": "key_filename",
        "kind": 5,
        "importPath": "pycon",
        "description": "pycon",
        "peekOfCode": "key_filename = \"openSSHkey.pem\"\ncommand =\"\"\ndata =\"\"\nlistbox = None\n#windowSize =(128,720)\n# Load the JSON data\nwith open('connections.json', 'r') as json_file:\n    data = json.load(json_file)\n# Function to handle the \"Connect\" button click\ndef connect_button():",
        "detail": "pycon",
        "documentation": {}
    },
    {
        "label": "listbox",
        "kind": 5,
        "importPath": "pycon",
        "description": "pycon",
        "peekOfCode": "listbox = None\n#windowSize =(128,720)\n# Load the JSON data\nwith open('connections.json', 'r') as json_file:\n    data = json.load(json_file)\n# Function to handle the \"Connect\" button click\ndef connect_button():\n    selected_index = listbox.curselection()\n    if selected_index:\n        hostname = data['connection'][selected_index[0]]['name']",
        "detail": "pycon",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "pycon",
        "description": "pycon",
        "peekOfCode": "root = tk.Tk()\nroot.title(\"Putty alternative (SSH)\")\n#root.size = windowSize\n# Create a listbox to display connection names\nlistbox = tk.Listbox(root, selectmode=tk.SINGLE)\nlistbox.pack()\n# Populate the listbox with connection names\nfor connection in data['connection']:\n    listbox.insert(tk.END, connection['name'])\n# Create a \"Connect\" button",
        "detail": "pycon",
        "documentation": {}
    },
    {
        "label": "#root.size",
        "kind": 5,
        "importPath": "pycon",
        "description": "pycon",
        "peekOfCode": "#root.size = windowSize\n# Create a listbox to display connection names\nlistbox = tk.Listbox(root, selectmode=tk.SINGLE)\nlistbox.pack()\n# Populate the listbox with connection names\nfor connection in data['connection']:\n    listbox.insert(tk.END, connection['name'])\n# Create a \"Connect\" button\nconnect_button = tk.Button(root, text=\"Connect\", command=connect_button)\nconnect_button.pack()",
        "detail": "pycon",
        "documentation": {}
    },
    {
        "label": "listbox",
        "kind": 5,
        "importPath": "pycon",
        "description": "pycon",
        "peekOfCode": "listbox = tk.Listbox(root, selectmode=tk.SINGLE)\nlistbox.pack()\n# Populate the listbox with connection names\nfor connection in data['connection']:\n    listbox.insert(tk.END, connection['name'])\n# Create a \"Connect\" button\nconnect_button = tk.Button(root, text=\"Connect\", command=connect_button)\nconnect_button.pack()\n# Start the GUI main loop\nroot.mainloop()",
        "detail": "pycon",
        "documentation": {}
    },
    {
        "label": "connect_button",
        "kind": 5,
        "importPath": "pycon",
        "description": "pycon",
        "peekOfCode": "connect_button = tk.Button(root, text=\"Connect\", command=connect_button)\nconnect_button.pack()\n# Start the GUI main loop\nroot.mainloop()\ndef ssh_client(hostname, port, username, key_filename, command):\n    # Create an SSH client\n    client = paramiko.SSHClient()\n    # Automatically add the server's host key\n    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n    try:",
        "detail": "pycon",
        "documentation": {}
    }
]